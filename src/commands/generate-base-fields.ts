import { Command, Flags } from "@oclif/core";
import { createFromBuffer } from "@dprint/formatter";
import { getPath } from "@dprint/typescript";
import * as fs from "fs";
import { client } from "../kintone";

export default class GenerateBaseFields extends Command {
  static description = "フィールド定義ファイルを生成する";

  static examples = ["<%= config.bin %> <%= command.id %> -a 1"];

  static flags = {
    appId: Flags.string({
      char: "a",
      description: "The app ID.",
      required: true,
    }),
    output: Flags.string({ char: "o", description: "Output file path." }),
  };

  static args = [];

  public async run(): Promise<void> {
    const { flags } = await this.parse(GenerateBaseFields);

    const buffer = fs.readFileSync(getPath());
    const formatter = createFromBuffer(buffer);

    const appId = flags.appId;

    const resp = await client.app.getFormFields({ app: appId });

    let code = "";

    code += `// Generated by kintone-faker.\n`;
    code += `import { faker } from "@faker-js/faker/locale/ja";\n\n`;
    code += `const fields = {\n`;

    for (const k of Object.keys(resp.properties)) {
      const property = resp.properties[k];

      switch (property.type) {
        case "SINGLE_LINE_TEXT":
          code += `'${k}': {\n label: '${property.label}', value: () => faker.lorem.text() },\n`;
          break;

        case "MULTI_LINE_TEXT":
          code += `'${k}': {\n label: '${property.label}', value: () => faker.lorem.lines() },\n`;
          break;

        case "RICH_TEXT":
          code += `'${k}': {\n label: '${property.label}', value: () => faker.lorem.lines() },\n`;
          break;

        case "LINK":
          switch (property.protocol) {
            case "MAIL":
              code +=
                `'${k}': {\n label: '${property.label}', value: () => faker.internet.email(faker.internet.domainWord(), faker.internet.domainWord()) },\n`;
              break;
            case "CALL":
              code +=
                `'${k}': {\n label: '${property.label}', value: () => faker.phone.number() },\n`;
              break;
            case "WEB":
              code +=
                `'${k}': {\n label: '${property.label}', value: () => faker.internet.url() },\n`;
              break;
          }
      }
    }

    code += `};\n\n`;
    code += `export { fields };`;

    const output = formatter.formatText(`__defs_${appId}.ts`, code);

    if (flags.output) {
      fs.writeFileSync(flags.output, output);
    } else {
      process.stdout.write(output);
    }
  }
}
